console.log("hello! this is sparc");
console.log(new Date().toString());
console.log("render test for pola vector art data");

// th1n vector art font
const th1n = {};
th1n["!"] = [[[294,263],[378,184]],[[378,184],[682,190]],[[682,190],[740,270]],[[740,270],[741,431]],[[741,431],[516,570]],[[516,570],[511,808]],[[511,838],[513,862]]];
th1n["0"] = [[[392,164],[534,100]],[[534,100],[525,867]],[[525,867],[525,875]],[[424,870],[644,876]]];
th1n["1"] = [[[221,169],[794,167]],[[794,167],[794,208]],[[794,208],[222,691]],[[222,691],[225,716]],[[225,716],[783,716]]];
th1n["2"] = [[[270,187],[367,103]],[[367,103],[708,103]],[[708,103],[770,192]],[[770,192],[790,810]],[[790,810],[709,879]],[[709,879],[366,874]],[[366,874],[291,772]],[[291,772],[271,195]],[[705,104],[369,868]]];
th1n["3"] = [[[201,206],[296,132]],[[296,132],[743,124]],[[743,124],[809,218]],[[809,218],[811,318]],[[811,318],[177,790]],[[177,790],[179,840]],[[179,840],[696,839]],[[696,839],[711,816]]];
th1n["4"] = [[[237,228],[318,150]],[[318,150],[718,148]],[[718,148],[779,247]],[[779,247],[783,362]],[[783,362],[733,424]],[[733,424],[357,447]],[[740,433],[783,497]],[[783,497],[787,669]],[[787,669],[736,770]],[[736,770],[318,761]],[[318,761],[287,685]]];
th1n["5"] = [[[632,848],[647,173]],[[647,173],[187,453]],[[187,453],[721,468]]];
th1n["6"] = [[[808,133],[231,130]],[[231,130],[229,405]],[[229,405],[720,381]],[[720,381],[821,514]],[[821,514],[821,702]],[[821,702],[737,796]],[[737,796],[353,777]],[[353,777],[319,734]]];
th1n["7"] = [[[681,162],[343,164]],[[343,164],[221,290]],[[221,290],[223,472]],[[223,472],[665,481]],[[665,481],[757,566]],[[757,566],[759,762]],[[759,762],[694,845]],[[694,845],[291,828]],[[291,828],[241,706]],[[241,706],[225,477]]];
th1n["8"] = [[[288,183],[763,181]],[[763,181],[759,269]],[[759,269],[514,480]],[[514,480],[503,870]]];
th1n["9"] = [[[202,312],[401,137]],[[401,137],[645,138]],[[645,138],[794,284]],[[794,284],[256,597]],[[256,597],[247,701]],[[247,701],[320,780]],[[320,780],[655,792]],[[655,792],[745,702]],[[745,702],[742,625]],[[742,625],[206,315]]];
th1n["<"] = [[[485,97],[509,780]],[[514,830],[516,864]]];
th1n[">"] = [[[837,126],[224,521]],[[224,521],[829,844]]];
th1n["?"] = [[[344,802],[402,844]],[[402,844],[665,845]],[[665,845],[743,762]],[[743,762],[751,274]],[[751,274],[689,193]],[[689,193],[400,169]],[[400,169],[291,297]],[[291,297],[288,403]],[[288,403],[390,490]],[[390,490],[667,491]],[[667,491],[741,431]]];
th1n.A = [[[257,858],[327,217]],[[327,217],[556,85]],[[556,85],[765,200]],[[765,200],[882,841]],[[806,504],[310,501]]];
th1n.B = [[[221,139],[232,861]],[[244,473],[703,465]],[[235,141],[592,191]],[[592,191],[675,266]],[[675,266],[702,447]],[[247,855],[611,764]],[[611,764],[699,682]],[[699,682],[703,495]]];
th1n.C = [[[255,294],[245,747]],[[245,747],[250,756]],[[250,756],[376,842]],[[376,842],[630,848]],[[630,848],[732,689]],[[732,689],[732,683]],[[261,289],[411,170]],[[411,170],[619,190]],[[619,190],[720,375]]];
th1n.D = [[[258,824],[249,162]],[[256,154],[608,165]],[[608,165],[693,380]],[[693,380],[697,607]],[[697,607],[586,787]],[[586,787],[486,830]],[[486,830],[270,823]]];
th1n.E = [[[745,124],[231,118]],[[231,118],[217,885]],[[217,885],[753,856]],[[237,473],[634,460]]];
th1n.F = [[[828,130],[263,149]],[[263,149],[246,866]],[[275,488],[691,472]]];
th1n.G = [[[759,151],[385,154]],[[385,154],[221,300]],[[221,300],[211,717]],[[211,717],[341,828]],[[341,828],[771,813]],[[771,813],[775,498]],[[775,498],[555,484]],[[555,484],[558,529]]];
th1n.H = [[[230,172],[222,874]],[[829,161],[819,863]],[[247,488],[818,489]]];
th1n.I = [[[508,148],[512,892]],[[381,146],[656,146]],[[367,895],[673,897]]];
th1n.J = [[[755,153],[763,689]],[[763,689],[653,814]],[[653,814],[376,806]],[[376,806],[340,730]],[[340,730],[303,654]],[[303,654],[303,583]]];
th1n.K = [[[272,144],[266,867]],[[739,189],[281,477]],[[281,484],[760,811]]];
th1n.L = [[[214,170],[219,788]],[[219,788],[645,789]]];
th1n.M = [[[254,162],[248,831]],[[852,159],[831,837]],[[263,166],[534,451]],[[844,163],[541,453]]];
th1n.N = [[[222,869],[216,145]],[[216,145],[736,835]],[[736,835],[780,141]]];
th1n.O = [[[340,113],[688,116]],[[688,116],[783,216]],[[783,216],[801,745]],[[801,745],[714,858]],[[714,858],[365,846]],[[365,846],[283,732]],[[283,732],[264,255]],[[264,255],[336,115]]];
th1n.P = [[[256,836],[257,280]],[[257,280],[356,150]],[[356,150],[706,142]],[[706,142],[798,281]],[[798,281],[803,446]],[[803,446],[736,537]],[[736,537],[380,525]],[[380,525],[265,432]]];
th1n.Q = [[[381,115],[696,112]],[[696,112],[805,263]],[[805,263],[809,761]],[[809,761],[694,886]],[[694,886],[378,874]],[[378,874],[296,753]],[[296,753],[277,253]],[[277,253],[372,119]],[[572,645],[871,914]]];
th1n.R = [[[216,862],[215,265]],[[215,265],[345,138]],[[345,138],[628,120]],[[628,120],[751,252]],[[751,252],[760,437]],[[760,437],[695,521]],[[695,521],[374,512]],[[374,512],[237,442]],[[237,442],[756,842]]];
th1n.S = [[[760,150],[276,160]],[[276,160],[184,262]],[[184,262],[189,382]],[[189,382],[266,464]],[[266,464],[667,435]],[[667,435],[756,494]],[[756,494],[780,656]],[[780,656],[696,785]],[[696,785],[258,792]]];
th1n.T = [[[533,904],[512,173]],[[125,168],[913,159]]];
th1n.U = [[[245,139],[259,723]],[[259,723],[437,862]],[[437,862],[686,856]],[[686,856],[819,741]],[[819,741],[819,151]]];
th1n.V = [[[201,205],[487,843]],[[487,843],[860,183]]];
th1n.W = [[[201,205],[487,843]],[[487,843],[860,183]]];
th1n.X = [[[196,239],[312,798]],[[312,798],[522,552]],[[522,552],[676,779]],[[676,779],[832,210]]];
th1n.Y = [[[196,124],[198,227]],[[198,227],[789,764]],[[789,764],[794,862]],[[809,108],[810,216]],[[810,216],[217,757]],[[217,757],[222,853]]];
th1n.Z = [[[202,92],[201,253]],[[201,253],[508,481]],[[508,481],[825,229]],[[825,229],[823,108]],[[507,486],[502,850]]];


// imported pola vector art data
const qola = {};
qola.claw = [[[386,845],[372,607]],[[372,607],[183,467]],[[183,467],[150,347]],[[150,347],[150,196]],[[150,196],[197,168]],[[197,168],[234,203]],[[234,203],[273,389]],[[273,389],[315,393]],[[315,393],[337,94]],[[337,94],[369,61]],[[369,61],[412,98]],[[412,98],[434,376]],[[434,376],[471,395]],[[471,395],[517,380]],[[517,380],[528,73]],[[528,73],[585,45]],[[585,45],[608,79]],[[608,79],[622,231]],[[622,231],[616,386]],[[616,386],[663,413]],[[663,413],[703,389]],[[703,389],[723,146]],[[723,146],[783,136]],[[783,136],[794,487]],[[794,487],[595,642]],[[595,642],[554,832]]];
qola.dipole = [[[503,846],[817,546]],[[817,546],[896,208]],[[896,208],[470,66]],[[470,66],[159,233]],[[159,233],[201,554]],[[201,554],[504,846]],[[519,345],[517,684]],[[517,684],[238,260]],[[238,260],[788,265]],[[788,265],[521,684]],[[521,684],[352,298]],[[352,298],[699,310]],[[699,310],[519,681]]];
qola.ichty = [[[84,337],[388,116]],[[388,116],[714,325]],[[714,325],[930,152]],[[930,152],[930,154]],[[930,154],[947,497]],[[947,497],[710,419]],[[710,419],[402,583]],[[402,583],[96,352]],[[359,419],[427,478]],[[427,478],[496,431]],[[496,431],[424,257]],[[424,257],[359,415]]];
qola.monoid = [[[475,119],[240,538]],[[240,538],[471,585]],[[471,585],[699,503]],[[699,503],[478,118]]];
qola.quest = [[[492,244],[358,340]],[[358,340],[354,482]],[[354,482],[516,572]],[[516,572],[638,467]],[[638,467],[637,346]],[[637,346],[496,244]],[[487,130],[180,553]],[[180,553],[507,605]],[[507,605],[780,564]],[[780,564],[491,132]]];
qola.test = [[[87,110],[280,116]],[[280,116],[319,126]],[[319,126],[78,286]],[[78,286],[216,295]],[[216,295],[357,329]],[[357,329],[245,407]],[[245,407],[130,433]],[[161,488],[161,488]],[[161,488],[88,517]],[[88,517],[227,528]],[[227,528],[315,459]],[[194,57],[189,379]],[[189,379],[179,544]],[[236,69],[244,392]],[[244,392],[284,553]],[[107,491],[319,432]],[[59,377],[320,252]],[[135,191],[353,70]]];

// the main brain
class Sparc {
	constructor() {
		this.x = (Math.random() * Number.MAX_SAFE_INTEGER) >>> 0;
		console.log("new Sparc created!");
		console.log(this.x);
	}
	init() {
		// check three js
		console.log(THREE);
		sce.init();
		sce.ren();
		sce.cam();
		sce.scene();
		geo.proc();
		geo.line();
		sce.scene2();
	}
	seq() {
		this.tick = 0;
		this.id = window.setInterval(this.frame.bind(this), 1000);
	}
	frame() {
		console.log("tick count: " + this.tick);
		// console.log(this.sce.e);
		if (this.tick >= sce.f.length) {
			console.log("anim done.");
			window.clearInterval(this.id);
			return;
		}
		let k0 = sce.f[this.tick];
		sce.b.d.render(sce.e[k0], sce.c.c);
		this.tick = this.tick + 1;
	}
}

// scene and DOM 
const sce = {
	init() {
		// body alpha element
		sce.a = document.getElementById("alpha");
		// full screen canvas 
		sce.b = {};
		sce.b.r = [1920,1080,0,0];
		sce.b.c = sce.dom(sce.b.r);
		// attach
		sce.a.appendChild(sce.b.c.can);
	},
	dom(r0) {
		c0 = {};
		c0.can = document.createElement("canvas");
		c0.can.width = r0[0];
		c0.can.height = r0[1];
		c0.can.style.position = "absolute";
		c0.can.style.top = r0[3] + "px";
		c0.can.style.left = r0[2] + "px";
		return c0;
	},
	ren() {
		sce.b.d = new THREE.WebGLRenderer({canvas:sce.b.c.can});
		// sce.b.d.setClearColor(new THREE.Color(0x123456));
		sce.b.d.setClearColor(rgb.css());
		sce.b.d.clearColor();
	},
	cam() {
		// setup camera
		sce.c = {};
		// settings
		sce.c.a = [];
		// history buffer
		sce.c.b = [];
		// POV
		sce.c.a[0] = 75.0;
		// aspect ratio
		sce.c.a[1] = 1920.0 / 1080.0;
		// near plane
		sce.c.a[2] = 0.1;
		// far plane
		sce.c.a[3] = 2001.0;
		sce.c.b.push(sce.c.a);
		sce.c.c = new THREE.PerspectiveCamera(sce.c.a[0],sce.c.a[1],sce.c.a[2],sce.c.a[3]);
		sce.c.c.position.set(0,750,-1000);
		sce.c.c.lookAt(0,0,1000);
		console.log(sce.c.c);
		// perspective for viewing planes distortion
		// consider orthographic next go
	},
	scene() {
		// set up the scene graph
		sce.d = {};
		sce.d.a = new THREE.Scene();
	},
	line() {
		// material, geometry and line objects
	},
	scene2() {
		// reserve sce.d.a as a blank canvas
		sce.e = {};
		// keys
		sce.f = [];
		for (const k0 in geo.b.c) {
			sce.f.push(k0);
			sce.e[k0] = new THREE.Scene();
			// add each line to scene
			for (let i = 0; i < geo.b.c[k0].length; i++) {
				sce.e[k0].add(geo.b.c[k0][i]);
			}
		}
		// we can use dedicated methods for add / remove
		// object3d collections in group
	}
};

// geometry
const geo = {
	proc() {
		// input from pola vector art
		// as a flat array of line segments
		geo.a = {};
		for (const k0 in qola) {
			console.log(k0);
			// console.log(qola[k0].length);
			geo.a[k0] = [];
			let q0 = qola[k0];
			for (let i = 0; i < q0.length; i++) {
				// console.log(q0[i]);
				// point pairs [[x0,y0],[x1,y1]]
				let q1 = q0[i];
				// convert to a three js line segment
				let q2 = q1[0]; // start point
				let q3 = q1[1]; // end point
				// z = 0 for all points in z,y coordinate plane
				// let v0 = new THREE.Vector3(q2[0],q2[1],0);
				// let v1 = new THREE.Vector3(q3[0],q3[1],0);
				// invert y since canvas 2D is top down
				let x0 = q2[0];
				let y0 = 1024 - q2[1];
				let x1 = q3[0];
				let y1 = 1024 - q3[1];
				let v0 = new THREE.Vector3(x0,y0,0);
				let v1 = new THREE.Vector3(x1,y1,0);
				geo.a[k0].push([v0,v1]);
			}
		}
	},
	line() {
		// buffer geometry, materials and line objects
		// from the pola vector art data line segments
		geo.b = {};
		// line basic materials
		geo.b.a = {};
		// line geometry from points
		geo.b.b = {};
		// line objects
		geo.b.c = {};
		for (const k0 in geo.a) {
			let p0 = geo.a[k0];
			geo.b.a[k0] = [];
			geo.b.b[k0] = [];
			geo.b.c[k0] = [];
			for (let i = 0; i < p0.length; i++) {
				geo.b.a[k0][i] = new THREE.LineBasicMaterial({color:0x00ff00});
				geo.b.b[k0][i] = new THREE.BufferGeometry().setFromPoints(p0[i]);
				geo.b.c[k0][i] = new THREE.Line(geo.b.b[k0][i], geo.b.a[k0][i]);
			}

		}
	}
}

// matrix library
class Mat {
	constructor() {
		console.log("okaq matrix lib v0.1");
	}
}

// color
const rgb = {
	rand() {
		let f0 = (Math.random * 0xffffff) >>> 0;
		let f1 = f0.toString(16);
		return new THREE.Color(Number(f1));
		// bug! need a hexadecimal js Number type not hex string
	},
	css() {
		let b0 = rgb.rc();
		let s0 = "rgb(" + b0.join(",") + ")";
		return new THREE.Color(s0);
	},
	rb() {
		return (Math.random() * 255) >>> 0;
	},
	rc() {
		return [rgb.rb(),rgb.rb(),rgb.rb()];
	}
};

class Font {
	constructor() {
		console.log("th1n font render test. 2D ortho proj");
		this.data = geo2.proc(th1n);
		this.geo = this.data[0];
		this.keys = this.data[1];
		console.log(this.keys);
		// new scene, camera
	}
	init() {
		sce2.init();
		sce2.cam();
	}
}

const sce2 = {
	init() {
		sce2.a = document.getElementById("alpha");
		// full screen canvas
		sce2.b = {};
		sce2.b.r = [1920,1080,0,0];
		sce2.b.c = sce.dom(sce2.b.r);
		// attach
		sce2.a.appendChild(sce2.b.c.can);
	},
	cam() {
		// setup ortho cam
		sce2.c = {};
		sce2.c.c = new THREE.OrthographicCamera(0,1920,1080,0,-1000,1000);
	}
};

const geo2 = {
	proc(data) {
		// generalized geometry processor
		// create threejs geometry objects from pola vector data
		let a = {};
		let b = [];
		for (const k0 in data) {
			a[k0] = [];
			b.push(k0);
		}
		return [a,b];
	}
};

(function() {
	console.log(qola.test.length);
	let s = new Sparc();
	console.log(s.x);
	// s.sce = sce;
	// window.s = s;
	// window.setTimeout(e => s.init(), 1000);
	// window.setTimeout(e => s.seq(), 4000);
	let m = new Mat();
	// font test, orthographic projection
	let f = new Font();
	widow.setTimeout(e => f.init(), 1000);
})();


