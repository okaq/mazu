// okaq mazu tobi paru
// computer art pioneer
console.log("paru! on");
console.log(new Date().toString());

// mohr data
const mohr = {};
mohr.man =  [[[824,382],[811,301]],[[811,301],[783,225]],[[783,225],[735,181]],[[735,181],[671,156]],[[671,156],[580,134]],[[580,134],[566,100]],[[450,77],[411,132]],[[411,132],[360,146]],[[360,146],[298,166]],[[298,166],[248,204]],[[248,204],[200,250]],[[200,250],[178,291]],[[178,291],[164,336]],[[810,387],[754,357]],[[754,357],[713,339]],[[713,339],[676,334]],[[676,334],[644,332]],[[644,332],[609,339]],[[609,339],[585,354]],[[585,354],[578,373]],[[578,373],[580,395]],[[580,395],[598,411]],[[598,411],[627,419]],[[627,419],[655,421]],[[655,421],[690,421]],[[690,421],[724,418]],[[724,418],[758,410]],[[758,410],[774,394]],[[474,362],[443,337]],[[443,337],[425,325]],[[425,325],[406,317]],[[406,317],[382,313]],[[382,313],[357,313]],[[357,313],[320,313]],[[320,313],[290,322]],[[290,322],[260,334]],[[260,334],[247,369]],[[247,369],[263,394]],[[263,394],[291,406]],[[291,406],[325,416]],[[325,416],[356,414]],[[356,414],[378,401]],[[378,401],[401,397]],[[401,397],[413,393]],[[413,393],[427,389]],[[427,389],[450,382]],[[467,377],[470,402]],[[470,402],[473,427]],[[473,427],[473,456]],[[473,456],[474,479]],[[474,479],[468,499]],[[468,499],[465,517]],[[465,517],[456,527]],[[456,527],[443,522]],[[443,522],[426,515]],[[426,515],[414,533]],[[414,533],[414,551]],[[414,551],[422,565]],[[422,565],[437,577]],[[437,577],[454,578]],[[454,578],[467,572]],[[467,572],[475,572]],[[475,572],[480,580]],[[480,580],[489,582]],[[489,582],[498,578]],[[498,578],[508,573]],[[508,573],[521,573]],[[521,573],[528,563]],[[528,563],[526,547]],[[526,547],[519,529]],[[519,529],[515,519]],[[515,519],[511,495]],[[511,495],[508,467]],[[508,467],[509,415]],[[509,415],[508,400]],[[173,359],[177,389]],[[177,389],[189,413]],[[189,413],[203,435]],[[203,435],[215,459]],[[215,459],[226,483]],[[226,483],[233,507]],[[233,507],[239,532]],[[239,532],[239,566]],[[239,566],[242,601]],[[242,601],[249,626]],[[249,626],[257,657]],[[257,657],[272,693]],[[272,693],[283,721]],[[283,721],[298,741]],[[298,741],[315,760]],[[315,760],[334,774]],[[334,774],[391,790]],[[391,790],[435,803]],[[435,803],[479,811]],[[479,811],[537,814]],[[537,814],[590,811]],[[590,811],[642,790]],[[642,790],[680,769]],[[680,769],[693,733]],[[693,733],[698,695]],[[698,695],[698,635]],[[698,635],[701,599]],[[701,599],[719,563]],[[719,563],[737,542]],[[737,542],[761,521]],[[761,521],[781,497]],[[781,497],[802,472]],[[802,472],[814,432]],[[389,669],[412,652]],[[412,652],[440,639]],[[440,639],[469,633]],[[469,633],[483,632]],[[483,632],[496,637]],[[496,637],[507,643]],[[507,643],[521,645]],[[521,645],[533,640]],[[533,640],[552,642]],[[552,642],[571,657]],[[571,657],[591,674]],[[591,674],[606,695]],[[606,695],[599,713]],[[599,713],[572,730]],[[572,730],[540,739]],[[540,739],[508,737]],[[508,737],[472,728]],[[472,728],[434,720]],[[434,720],[413,704]],[[413,704],[393,681]],[[400,678],[423,685]],[[423,685],[446,690]],[[446,690],[475,695]],[[475,695],[501,697]],[[501,697],[528,699]],[[528,699],[552,699]],[[552,699],[582,699]],[[582,699],[597,698]],[[526,515],[538,529]],[[538,529],[547,545]],[[547,545],[548,561]],[[548,561],[540,576]],[[540,576],[528,583]],[[528,583],[519,584]],[[447,322],[429,311]],[[429,311],[399,304]],[[399,304],[366,302]],[[366,302],[339,301]],[[339,301],[307,303]],[[307,303],[288,310]],[[288,310],[272,315]],[[272,315],[281,302]],[[281,302],[294,296]],[[294,296],[310,290]],[[310,290],[329,288]],[[329,288],[349,288]],[[349,288],[372,290]],[[372,290],[394,295]],[[394,295],[412,296]],[[412,296],[436,303]],[[436,303],[443,310]],[[747,336],[720,330]],[[720,330],[698,326]],[[698,326],[672,324]],[[672,324],[643,321]],[[643,321],[621,327]],[[621,327],[594,341]],[[594,341],[598,328]],[[598,328],[610,319]],[[610,319],[624,313]],[[624,313],[640,309]],[[640,309],[658,307]],[[658,307],[673,307]],[[673,307],[687,307]],[[687,307],[700,306]],[[700,306],[715,305]],[[452,369],[430,374]],[[430,374],[403,381]],[[403,381],[377,389]],[[377,389],[353,391]],[[353,391],[324,391]],[[324,391],[297,385]],[[297,385],[278,376]],[[278,376],[282,366]],[[282,366],[297,361]],[[297,361],[312,356]],[[312,356],[329,352]],[[329,352],[352,350]],[[352,350],[367,350]],[[367,350],[381,352]],[[381,352],[397,359]],[[397,359],[420,360]],[[420,360],[440,364]],[[589,380],[604,375]],[[604,375],[617,374]],[[617,374],[636,369]],[[636,369],[651,369]],[[651,369],[665,369]],[[665,369],[679,370]],[[679,370],[699,373]],[[699,373],[719,376]],[[719,376],[737,381]],[[737,381],[754,390]],[[754,390],[751,402]],[[751,402],[732,400]],[[732,400],[711,401]],[[711,401],[679,403]],[[679,403],[656,403]],[[656,403],[638,400]],[[638,400],[618,398]],[[618,398],[598,392]],[[598,392],[660,375]],[[660,375],[669,376]],[[357,359],[346,363]],[[346,363],[338,369]],[[338,369],[330,376]],[[330,376],[331,385]],[[331,385],[351,386]],[[351,386],[361,383]],[[361,383],[367,376]],[[367,376],[369,365]],[[369,365],[361,358]],[[680,379],[687,385]],[[687,385],[688,390]],[[688,390],[678,397]],[[678,397],[668,395]],[[668,395],[664,385]],[[664,385],[675,380]],[[500,622],[509,627]],[[509,627],[518,624]],[[518,624],[528,624]],[[509,341],[518,341]],[[518,341],[528,343]],[[528,343],[534,348]],[[522,392],[523,409]],[[523,409],[523,427]],[[523,427],[523,448]],[[523,448],[526,468]],[[526,468],[526,498]],[[514,326],[521,326]],[[521,326],[524,329]],[[407,673],[423,674]],[[423,674],[434,676]],[[434,676],[447,676]],[[447,676],[465,677]],[[465,677],[481,677]],[[481,677],[494,677]],[[494,677],[508,680]],[[508,680],[520,681]],[[520,681],[534,686]],[[534,686],[554,686]],[[554,686],[576,691]],[[576,691],[592,691]],[[256,479],[265,487]],[[265,487],[282,502]],[[282,502],[312,534]],[[312,534],[325,560]],[[325,560],[332,592]],[[332,592],[338,617]],[[338,617],[349,636]],[[737,464],[688,484]],[[688,484],[655,495]],[[655,495],[643,512]],[[643,512],[633,535]],[[633,535],[625,562]],[[625,562],[622,589]],[[622,589],[622,611]],[[502,809],[503,797]],[[503,797],[503,792]],[[462,89],[456,64]],[[456,64],[443,41]],[[443,41],[428,28]],[[428,28],[412,14]],[[536,128],[545,109]],[[545,109],[558,94]],[[558,94],[574,83]],[[574,83],[593,71]],[[593,71],[617,60]],[[617,60],[642,48]],[[642,48],[673,36]],[[471,165],[472,149]],[[472,149],[472,130]],[[472,130],[469,107]],[[469,107],[465,96]],[[465,96],[516,178]],[[516,178],[527,163]],[[527,163],[532,153]],[[532,153],[536,140]],[[551,167],[554,133]],[[554,133],[556,112]],[[544,512],[559,524]],[[559,524],[563,534]],[[563,534],[563,550]],[[563,550],[559,564]],[[485,153],[492,176]],[[492,176],[503,211]],[[503,211],[510,234]],[[510,234],[510,258]],[[510,258],[515,273]],[[515,273],[521,252]],[[521,252],[525,232]],[[525,232],[525,207]],[[525,207],[531,192]],[[531,192],[537,170]]];

// dom
const dom = {
	init() {
		dom.a = document.getElementById("alpha");
		console.log(dom.a);
	},
	canvas(r0) {
		let c0 = {};
		
		c0.can = document.createElement("canvas");
		c0.can.width = r0[0];
		c0.can.height = r0[1];
		c0.can.style.position = "absolute";
		c0.can.style.top = r0[3] + "px";
		c0.can.style.left = r0[2] + "px";
		
		return c0;
	},
	add(c0) {
		dom.a.appendChild(c0.can);
	},
	remove(c0) {
		dom.a.removeChild(c0.can);
	}
};

// scene
const sce = {
	init() {
		// full screen hd
		sce.a = {};
		sce.a.r = [1920,1080,0,0];
		sce.a.c = dom.canvas(sce.a.r);
		dom.add(sce.a.c);
		// threejs scene
		sce.b = new THREE.Scene();
		// orthographic perspective
		sce.c = new THREE.OrthographicCamera(0,1920,1080,0,-1000,1000);
		// renderer
		sce.d = new THREE.WebGLRenderer({canvas:sce.a.c.can});
		sce.d.setClearColor(0x000000);
		sce.d.clearColor();
	}
}

// anim
const loop = {
	seq() {
		console.log("start sequence");
	}
};

// vector data processor
const geo = {
	init() {
		// symbols, mohr, th1n, deco, shape
		// geo.a = geo.proc(th1n);
		// geo.b = geo.line();
	},
	proc(data) {
		// threejs vectors
		let a = {};
		// keys
		let b = [];
		for (const k0 in data) {
			a[k0] = geo.vec(data[k0]);
			b.push(k0);
		}
		return [a,b];
	},
	vec(d0) {
		let r0 = [];
		for (let i = 0; i < d0.length; i++) {
			// triple depth line segments points array
			let d1 = d0[i];
			let d2 = d1[0];
			let d3 = d1[1];
			let x0 = d2[0];
			let y0 = 1024 - d2[1];
			let x1 = d3[0];
			let y1 = 1024 - d3[1];
			let v0 = new THREE.Vector3(x0,y0,0);
			let v1 = new THREE.Vector3(x1,y1,0);
			r0.push([v0,v1]);
		}
		return r0;
	},
	line() {
		let b = {};
		// material
		b.a = {};
		// geometry
		b.b = {};
		// line
		b.c = {};
		for (const k0 in geo.a[0]) {
			b.a[k0] = [];
			b.b[k0] = [];
			b.c[k0] = [];
			let p0 = geo.a[0][k0];
			let r0 = Math.random();
			let g0 = Math.random();
			let b0 = Math.random();
			let c0 = new THREE.Color(r0,g0,b0);	
			for (let i = 0; i < p0.length; i++) {
				// let r0 = Math.random();
				// let g0 = Math.random();
				// let b0 = Math.random();
				// let c0 = new THREE.Color(r0,g0,b0);
				b.a[k0][i] = new THREE.LineBasicMaterial({color:c0});
				// b.a[k0][i] = new THREE.LineBasicMaterial({color:0x00ff00});
				b.b[k0][i] = new THREE.BufferGeometry().setFromPoints(p0[i]);
				b.c[k0][i] = new THREE.Line(b.b[k0][i], b.a[k0][i]);
			}
		}
		return b;
	},
	rand() {
		let f0 = (Math.random() * geo.a[1].length) >>> 0;
		let k0 = geo.a[1][f0];
		return k0;
	}
};

// angle
const rad = {
	polar(x,y) {
		// cartesian to polar transform
		let r0 = [];
		let r1 = Math.sqrt(x*x + y*y);
		let th0 = Math.atan2(y,x);
		r0[0] = r1;
		r0[1] = th0;

		return r0;
	},
	cart(r0,th0) {
		// input polar, output carto
		let r1 = [];
		let x0 = Math.cos(th0);
		x0 = x0 * r0;
		let y0 = Math.sin(th0);
		y0 = y0 * r0;
		r1[0] = x0;
		r1[1] = y0;

		return r1;
	}
};

// main
(function() {
	console.log("starting routine");
	subs = [dom,sce,geo];
	subs.forEach(el => el.init());
	window.setTimeout(e => loop.seq(e), 1000);
})();
